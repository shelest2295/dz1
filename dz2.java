package yaroslav_shelest.lesson.dz2;

import java.util.Scanner;
import java.util.Arrays;

public class dz2 {
    public static void main(String[] args) {

        Scanner scanner = new Scanner(System.in);
        System.out.println("Введите номер задания");
        int a = scanner.nextInt();

        switch (a) { // запуск выбора задания
            case 1:
            System.out.println("Задание 1");
            System.out.println("Задать целочисленный массив, состоящий из элементов 0 и 1. " +
                    "Например: [ 1, 1, 0, 0, 1, 0, 1, 1, 0, 0 ]. " +
                    "С помощью цикла и условия заменить 0 на 1, 1 на 0");
            int[] part1 = {1, 0, 1, 0, 0, 1}; // задаем одномерный массив
            System.out.println(Arrays.toString(part1)); // печать одномерногомассива в консоль
            fvdfv(part1); // печатается результат работы в консоль
            break; //останавливает выполнение блока case

            case 2:
            System.out.println("Задание 2");
            System.out.println("Задать пустой целочисленный массив размером 8. " +
                    "С помощью цикла заполнить его значениями 0 3 6 9 12 15 18 21");
            int[] part2 = new int[8]; // задаем одномерный массив
            get(part2); // печатается результат работы в консоль
            break; //останавливает выполнение блока case

            case 3:
            System.out.println("Задание 3");
            System.out.println("Задать массив [ 1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1 ] " +
                    "пройти по нему циклом, и числа меньшие 6 умножить на 2");
            int[] part3 = {1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1}; // задаем одномерный массив
            System.out.println(Arrays.toString(part3)); // печать одномерногомассива в консоль
            fhn(part3); // печатается результат работы в консоль
            break; //останавливает выполнение блока case

            case 4:
            System.out.println("Задание 4");
            System.out.println("Создать квадратный двумерный целочисленный массив " +
                    "(количество строк и столбцов одинаковое), и с помощью цикла(-ов) " +
                    "заполнить его диагональные элементы единицами");
            System.out.println("Введите размер квадратного массива");
            int n = scanner.nextInt();
            int[][] part4 = new int[n][n]; // задаем двумерный массив
            ghn(part4, n); // печатается результат работы в консоль
            break; //останавливает выполнение блока case

            case 5:
            System.out.println("Задание 5");
            System.out.println("Задать одномерный массив и найти в нем минимальный и максимальный элементы");
            int[] part5 = {1, 5, 3, 2, 11, 4, 5, 2, 4, 8, 9, 1}; // задаем одномерный массив
            System.out.println(Arrays.toString(part5)); // печать одномерногомассива в консоль
            dsf(part5); // печатается результат работы в консоль
            break; //останавливает выполнение блока case

            case 6:
            System.out.println("Задание 6");
            System.out.println("Написать метод, в который передается не пустой одномерный целочисленный массив, " +
                    "метод должен вернуть true, если в массиве есть место, в котором сумма левой и правой части " +
                    "массива равны. Примеры: checkBalance([2, 2, 2, 1, 2, 2, || 10, 1]) → true, " +
                    "checkBalance([1, 1, 1, || 2, 1]) → true, граница показана символами ||, " +
                    "эти символы в массив не входят");
            int[] checkBalance = {2, 2, 2, 1, 2, 2, 10, 1}; // задаем одномерный массив
            System.out.println(Arrays.toString(checkBalance)); // печать одномерногомассива в консоль
            System.out.println(isTrue(checkBalance));  // печатается результат работы в консоль
            break; //останавливает выполнение блока case

            case 7:
            System.out.println("Задание 7");
            System.out.println("Написать метод, которому на вход подается одномерный массив и число n " +
                    "(может быть положительным, или отрицательным), при этом метод должен сместить все элементымассива " +
                    "на n позиций. Для усложнения задачи нельзя пользоваться вспомогательными массивами.");
            int[] part7 = {1, 2, 3, 4, 5, 6, 7, 8, 9}; // задаем одномерный массив
            System.out.println(Arrays.toString(part7)); // печать одномерногомассива в консоль
            System.out.println("Введите смещение");
            int x = scanner.nextInt();
            fvrv(part7, x); // печатается результат работы в консоль
            break; //останавливает выполнение блока case
        }

    }

//    Задание 1
    public static void fvdfv(int part1[]) {     // part1 входной параметр этого метода
        for (int i = 0; i < part1.length; i++) { // построение одномерного массива
            if (part1[i] == 0) { // поиск значений равных 0
                part1[i] = 1; // замена 0 на 1
            } else if (part1[i] == 1) { // поиск значений равных 1
                part1[i] = 0; // замена 1 на 0
            }
        }
        System.out.println(Arrays.toString(part1)); // печать одномерногомассива в консоль
    }

//    Задание 2
    public static void get(int part2[]) {     // part2 входной параметр этого метода
        for (int i = 0; i < part2.length; i++) { // построение одномерного массива
            part2[i] = 3 * i; // в каждый элемент подставляется число равное элементу помноженное на 3
        }
        System.out.println(Arrays.toString(part2)); // печать одномерногомассива в консоль
    }

//    Задание 3
    public static void fhn(int part3[]) {     // part3 входной параметр этого метода
        for (int i = 0; i < part3.length; i++) { // построение одномерного массива
            if (part3[i] < 6) { // поиск чисел меньше 6
                part3[i] = part3[i] * 2; // умножение этих чисел в 2 раза
            }
        }
        System.out.println(Arrays.toString(part3)); // печать одномерногомассива в консоль
    }

//    Задание 4
    public static void ghn(int part4[][], int n) {     // part4, n входной параметр этого метода
        int x = n - 1;
        for (int i = 0; i < n; i++) { // построение двумерного массива
            for (int j = 0; j < n; j++) {
                if (i == j) { // поиск ячеек, где элементы одинаковые
                    part4[i][j] = 1; // подстановка в эти элементы число 1
                }
                if (j == x - i) { // создание условий для построение второй диагонали
                    part4[i][x - i] = 1; // подстановка в эти элементы 1
                }
                System.out.print(part4[i][j] + " "); // печать одномерногомассива в консоль
            }
            System.out.println(); // печать одномерногомассива в консоль
        }
    }

//    Задание 5
    public static void dsf(int part5[]) {     // part5 входной параметр этого метода
        int max = part5[0]; // создание переменной для нахожения максимального числа в массиве и равной нулевому элементу
        int min = part5[0]; // создание переменной для нахожения минимального числа в массиве и равной нулевому элементу
        for (int i = 0; i < part5.length; i++) { // построение одномерного массива
            if (part5[i] > max) { // поиск наибольшего соседнего числа
                max = part5[i]; // запоминаем максимальное число и сравниваем с другими числами в массиве,
                // если находится больше, то число запоминается и цикл повторяется
            }
            if (part5[i] < min) { // поиск наименьшего соседнего числа
                min = part5[i]; //запоминаем минимальное число и сравниваем с другими числами в массиве,
                // если находится меньше, то число запоминается и цикл повторяется
            }
        }
        System.out.println(max + " max"); // вывод данных в консоль
        System.out.println(min + " min"); // вывод данных в консоль
    }
//
//
//
//     Задание 6
      public static boolean isTrue(int checkBalance[]) {     // checkBalance входной параметр этого метода
        int sum1 = 0; // создание переменной для суммирования чисел в первой части массива и присваиваем ему нуль
        int sum2 = 0; // создание переменной для суммирования чисел в второй части массива и присваиваем ему нуль
        for (int i = 0; i < (checkBalance.length - 2); i++) { // создаем одномерный массив
            sum1 = sum1 + checkBalance[i]; // суммирование чисел первой части массива
        }
        for (int i = checkBalance.length - 2; i < checkBalance.length; i++) { // создаем одномерный массив
            sum2 = sum2 + checkBalance[i]; // суммирование чисел второй части массива
        }
//        System.out.println(sum2);
        return sum1 == sum2; // сравнивание просуммированных частей массива
    }
//
//    Задание 7
    public static void fvrv(int part7[], int x) {     //part7, х входной параметр этого метода
        if (x > 0) { // условие при котором смещение положительное
            for (int i = 0; i < x; i++) { // создаем одномерный массив
                int temp = part7[0]; // запоминаем нулевой элемент массива
                part7[0] = part7[part7.length - 1]; // присваиваем нулевому элементу последний элемент массива
                for (int j = 0; j < part7.length - 1; j++) { // создание цикла
                    part7[part7.length - j - 1] = part7[part7.length - j - 2]; // создаем смещение, при котором числа смещаются вправо
                }
                part7[1] = temp; // подставнока в элемент равной 1 запомнившаеся число
            }
            System.out.println(Arrays.toString(part7)); // печать одномерногомассива в консоль
        }
        if (x < 0) { // условие при котором смещение отрицательное
            x = x * -1; // избавляемя от знака минус
            for (int i = 0; i < x; i++) { // создаем одномерный массив
                    int temp = part7[part7.length - 1]; // запоминаем последний элемент массива
                part7[part7.length - 1] = part7[0]; // присваиваем последнему элементу нулевой элемент массива
                    for (int j = 0; j < part7.length - 1; j++) { // создание цикла
                        part7[j] = part7[ j + 1]; // создаем смещение, при котором числа смещаются влево
                    }
                part7[part7.length - 2] = temp; // подставнока в предпоследний элемент запомнившаеся число
            }
            System.out.println(Arrays.toString(part7)); // печать одномерногомассива в консоль
        }

        }
    }



